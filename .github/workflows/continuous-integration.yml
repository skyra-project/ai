name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  Building:
    name: Compile source code
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        node_version: [12, 14]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node_version }}-${{ hashFiles(matrix.os == 'windows-latest' && '**\yarn.lock' || '**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Compile Projects
        run: yarn build

  Testing:
    name: Unit Tests
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        node_version: [12, 14]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node_version }}-${{ hashFiles(matrix.os == 'windows-latest' && '**\yarn.lock' || '**/yarn.lock') }}
      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '3.16.x'
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Build C++ tests
        run: mkdir build-tests && cd build-tests && cmake .. && cmake --build . && cd ..
      - name: Run tests
        run: yarn test
      - name: Run C++ Tests
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./build-tests/Debug/skyra_ai_tests.exe
          else
            ./build-tests/skyra_ai_tests
          fi
        shell: bash
